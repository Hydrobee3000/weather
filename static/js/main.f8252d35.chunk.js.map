{"version":3,"sources":["components/WeekWeatherContainer/WeekWeather/WeekWeather.module.css","components/api/api.js","redux/reducers/weatherReducer.js","components/Header/Header.jsx","assets/preloader.gif","components/common/Preloader/Preloader.jsx","components/DayWeatherContainer/DayWeather/DayWeather.jsx","components/DayWeatherContainer/DayWeatherContainer.jsx","components/WeekWeatherContainer/WeekWeather/WeatherCard/WeatherCard.jsx","components/WeekWeatherContainer/WeekWeather/WeekWeather.jsx","components/WeekWeatherContainer/WeekWeatherContainer.jsx","App.js","reportWebVitals.js","redux/store.js","index.js","components/Header/Header.module.css","components/DayWeatherContainer/DayWeather/DayWeather.module.css"],"names":["module","exports","instance","axios","baseURL","headers","Accept","weatherAPI","city","get","SET_ACTIVE_PLACE","SET_DAY_WEATHER_DATA","SET_WEEK_WEATHER_DATA","initialState","places","activePlace","dayWeatherData","weekWeatherData","weatherReducer","state","action","type","payload","StyledBreadcrumb","styled","Chip","theme","backgroundColor","palette","mode","grey","emphasize","Header","dispatch","useDispatch","matches","useMediaQuery","today","Date","options","weekday","year","month","day","AppBar","style","className","s","wrapper","position","Toolbar","toolbar","Typography","date","variant","gutterBottom","component","toLocaleDateString","Breadcrumbs","breadcrumbs","activeStyle","fontWeight","isActive","link_active","link","to","label","icon","fontSize","paddingLeft","color","Select","select","id","value","map","place","index","MenuItem","onClick","setActivePlace","left","top","marginLeft","width","height","zIndex","Preloader","src","preloader","alt","DayWeather","weatherData","weather","useSelector","Container","title","main","name","image","description","parameter","temp","toFixed","feels_like","DayWeatherContainer","useEffect","a","response","data","WeatherCard","ms","dt","weekdayName","toLocaleString","Card","sx","maxWidth","marginRight","marginTop","paddingBottom","display","flexDirection","marginBottom","Math","round","WeekWeather","dailyData","list","filter","reading","dt_txt","includes","Box","WeekWeatherContainer","App","Grid","container","item","xs","path","element","replace","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f8252d35.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"WeekWeather_wrapper__2NBcV\"};","import * as axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n  baseURL: `https://api.openweathermap.org/data/2.5/`,\r\n  headers: { Accept: 'application/json' },\r\n})\r\n\r\nexport const weatherAPI = {\r\n  getDayWeather(city) {\r\n    return instance.get(`weather?q=${city}&appid=5712b8887160185aaa20b84fcd1da1c4`)\r\n  },\r\n  getWeekWeather(city) {\r\n    return instance.get(`forecast?q=${city}&lang=ru&units=metric&APPID=5712b8887160185aaa20b84fcd1da1c4`)\r\n  },\r\n}\r\n","import { weatherAPI } from './../../components/api/api'\r\n\r\nconst SET_ACTIVE_PLACE = 'SET_ACTIVE_PLACE'\r\nconst SET_DAY_WEATHER_DATA = 'SET_DAY_WEATHER_DATA'\r\nconst SET_WEEK_WEATHER_DATA = 'SET_WEEK_WEATHER_DATA'\r\n\r\nconst initialState = {\r\n  places: ['Omsk', 'Novosibirsk', 'Moscow', 'Tomsk', 'Ekaterinburg', 'Altay'],\r\n  activePlace: 'Omsk',\r\n  dayWeatherData: null,\r\n  weekWeatherData: null,\r\n}\r\n\r\nconst weatherReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_ACTIVE_PLACE: {\r\n      return {\r\n        ...state,\r\n        activePlace: action.payload,\r\n      }\r\n    }\r\n\r\n    case SET_DAY_WEATHER_DATA: {\r\n      return {\r\n        ...state,\r\n        dayWeatherData: action.payload,\r\n      }\r\n    }\r\n    case SET_WEEK_WEATHER_DATA: {\r\n      return {\r\n        ...state,\r\n        weekWeatherData: action.payload,\r\n      }\r\n    }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const setActivePlace = (activePlace) => ({ type: SET_ACTIVE_PLACE, payload: activePlace })\r\nexport const setDayWeatherData = (dayWeatherData) => ({ type: SET_DAY_WEATHER_DATA, payload: dayWeatherData })\r\nexport const setWeekWeatherData = (weekWeatherData) => ({ type: SET_WEEK_WEATHER_DATA, payload: weekWeatherData })\r\n\r\nexport const fetchDayWeatherData = (city) => {\r\n  return async (dispatch) => {\r\n    let response = await weatherAPI.getDayWeather(city)\r\n    dispatch(setDayWeatherData(response.data))\r\n  }\r\n}\r\nexport const fetchWeekWeatherData = (city) => {\r\n  return async (dispatch) => {\r\n    let response = await weatherAPI.getWeekWeather(city)\r\n    dispatch(setWeekWeatherData(response.data))\r\n  }\r\n}\r\n\r\nexport default weatherReducer\r\n","import s from './Header.module.css'\r\nimport { Breadcrumbs, MenuItem, Select } from '@mui/material'\r\nimport Chip from '@mui/material/Chip'\r\nimport { emphasize, styled } from '@mui/material/styles'\r\nimport { AppBar, Toolbar } from '@mui/material'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { useDispatch } from 'react-redux'\r\nimport { setActivePlace } from './../../redux/reducers/weatherReducer'\r\nimport CalendarViewWeekIcon from '@mui/icons-material/CalendarViewWeek'\r\nimport BrightnessLowIcon from '@mui/icons-material/BrightnessLow'\r\nimport { Typography } from '@mui/material'\r\nimport useMediaQuery from '@mui/material/useMediaQuery'\r\n\r\nconst StyledBreadcrumb = styled(Chip)(({ theme }) => {\r\n  const backgroundColor = theme.palette.mode === 'light' ? theme.palette.grey[100] : theme.palette.grey[800]\r\n  return {\r\n    backgroundColor,\r\n    // height: theme.spacing(4),\r\n    // color: theme.palette.text.primary,\r\n    '&:hover, &:focus': {\r\n      backgroundColor: emphasize(backgroundColor, 0.06),\r\n    },\r\n    '&:active': {\r\n      // boxShadow: theme.shadows[1],\r\n      backgroundColor: emphasize(backgroundColor, 0.12),\r\n    },\r\n  }\r\n})\r\n\r\nconst Header = ({ places, activePlace }) => {\r\n  const dispatch = useDispatch()\r\n  const matches = useMediaQuery('(min-width:600px)') //media-query hook\r\n\r\n  const today = new Date() //current date\r\n  //show full date only on large screens\r\n  const options = matches ? { weekday: 'long', year: 'numeric', month: 'numeric', day: 'numeric' } : { weekday: 'long' }\r\n\r\n  return (\r\n    <AppBar style={{ backgroundColor: '#2b7a78' }} className={s.wrapper} position='static'>\r\n      <Toolbar className={s.toolbar}>\r\n        <Typography className={s.date} variant='p' gutterBottom component='div'>\r\n          {today.toLocaleDateString('en-US', options)}\r\n        </Typography>\r\n        {/* navigation */}\r\n        <Breadcrumbs className={s.breadcrumbs} aria-label='breadcrumb'>\r\n          <NavLink\r\n            activeStyle={{\r\n              fontWeight: 'bold',\r\n            }}\r\n            // style={{ textDecoration: 'none' }}\r\n            className={({ isActive }) => (isActive ? s.link_active : s.link)}\r\n            to='/current-weather'>\r\n            <StyledBreadcrumb\r\n              label={matches ? 'Weather' : null}\r\n              icon={\r\n                <BrightnessLowIcon fontSize={matches ? 'small' : 'medium'} style={matches ? null : { paddingLeft: '0.5em' }} />\r\n                // show icon centered only on small screens\r\n              }\r\n            />\r\n            {/* show name of breadcrumb only on large screens*/}\r\n          </NavLink>\r\n          <NavLink className={({ isActive }) => (isActive ? s.link_active : s.link)} to='/weather-forecast'>\r\n            <StyledBreadcrumb\r\n              label={matches ? 'Forecast' : null}\r\n              icon={\r\n                <CalendarViewWeekIcon\r\n                  color='inherit'\r\n                  fontSize={matches ? 'small' : 'medium'}\r\n                  style={matches ? null : { paddingLeft: '0.5em' }}\r\n                />\r\n              }\r\n            />\r\n          </NavLink>\r\n        </Breadcrumbs>\r\n        <Select className={s.select} id='demo-simple-select' value={activePlace}>\r\n          {places.map((place, index) => (\r\n            <MenuItem key={index} value={place} onClick={() => dispatch(setActivePlace(place))}>\r\n              {place}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </Toolbar>\r\n    </AppBar>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","export default __webpack_public_path__ + \"static/media/preloader.6a4dab05.gif\";","import preloader from '../../../assets/preloader.gif'\r\n\r\nconst style = {\r\n  position: 'absolute',\r\n  left: '50%',\r\n  top: '20%',\r\n  marginLeft: '-1.95em',\r\n  width: '100px',\r\n  height: '100px',\r\n  zIndex: '999',\r\n}\r\nlet Preloader = () => {\r\n  return (\r\n    <div style={style}>\r\n      <img src={preloader} alt='preloader' />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Preloader\r\n","import { Container, Typography } from '@mui/material'\r\nimport { useSelector } from 'react-redux'\r\nimport s from './DayWeather.module.css'\r\n\r\nconst DayWeather = ({ weatherData }) => {\r\n  const weather = useSelector((state) => state.weather.dayWeatherData.weather[0])\r\n\r\n  return (\r\n    <Container className={s.wrapper}>\r\n      <Typography style={{ fontSize: '2.5em' }} className={s.title} variant='h2' gutterBottom component='div'>\r\n        {weather.main} in {weatherData.name}\r\n      </Typography>\r\n      <img className={s.image} src={`http://openweathermap.org/img/w/${weather.icon}.png`} alt={weatherData.description} />\r\n\r\n      <Typography style={{ fontSize: '1.2em' }} className={s.parameter} variant='h5' gutterBottom component='div'>\r\n        Temperature: {(weatherData.main.temp - 273.15).toFixed(1)} °С\r\n      </Typography>\r\n      <Typography style={{ fontSize: '1.2em' }} className={s.parameter} variant='h5' gutterBottom component='div'>\r\n        Feels like: {(weatherData.main.feels_like - 273.15).toFixed(1)} °С\r\n      </Typography>\r\n      {/* дополнительные параметры, которые, как мне кажется, рядовому пользователю не нужны) *}\r\n      {/* <Typography className={s.parameter} variant='h5' gutterBottom component='div'>\r\n        Min t: {(weatherData.main.temp_min - 273.15).toFixed(1)} °С\r\n      </Typography>\r\n      <Typography className={s.parameter} variant='h5' gutterBottom component='div'>\r\n        Max t: {(weatherData.main.temp_max - 273.15).toFixed(1)} °С\r\n      </Typography> */}\r\n      {/* <Typography className={s.parameter} variant='h5' gutterBottom component='div'>\r\n        Wind: {weatherData.wind.speed} m/s\r\n      </Typography>\r\n      <Typography className={s.parameter} variant='h5' gutterBottom component='div'>\r\n        Humidity: {weatherData.main.humidity}%\r\n      </Typography>\r\n      <Typography className={s.parameter} variant='h5' gutterBottom component='div'>\r\n        Pressure: {weatherData.main.pressure}\r\n      </Typography> */}\r\n\r\n      {/* <div className='daily-weather'><WeekWeather city={props.city} /></div> */}\r\n\r\n      {/* <Typography className={s.date} variant='h4' gutterBottom component='div'>\r\n        {new Date().toLocaleString('en', { weekday: 'long' })} {new Date().getDate()}.{new Date().getMonth()}.\r\n        {new Date().getFullYear()}\r\n      </Typography> */}\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default DayWeather\r\n","import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { fetchDayWeatherData } from '../../redux/reducers/weatherReducer'\r\nimport Preloader from './../common/Preloader/Preloader'\r\nimport DayWeather from './DayWeather/DayWeather'\r\n\r\nconst DayWeatherContainer = ({ activePlace }) => {\r\n  const dispatch = useDispatch()\r\n  const dayWeatherData = useSelector((state) => state.weather.dayWeatherData) //get data\r\n\r\n  //fetch data\r\n  useEffect(() => {\r\n    dispatch(fetchDayWeatherData(activePlace))\r\n  }, [dispatch, activePlace])\r\n\r\n  //display preloader, while data is empty\r\n  if (!dayWeatherData) {\r\n    return <Preloader />\r\n  }\r\n  return <DayWeather weatherData={dayWeatherData} />\r\n}\r\n\r\nexport default DayWeatherContainer\r\n","import { Typography } from '@mui/material'\r\nimport Card from '@mui/material/Card'\r\n\r\nconst WeatherCard = ({ day }) => {\r\n  const ms = day.dt * 1000\r\n  const weekdayName = new Date(ms).toLocaleString('en', { weekday: 'long' })\r\n\r\n  return (\r\n    <Card sx={{ maxWidth: 350, marginLeft: 'auto', marginRight: 'auto', marginTop: '2em', paddingBottom: '1em' }}>\r\n      <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n        <Typography style={{ marginTop: '0.3em', fontSize: '2.6em' }} variant='h2' gutterBottom component='div'>\r\n          {weekdayName}\r\n          {/* {<img src={`http://openweathermap.org/img/w/${weather.icon}.png`} alt={weatherData.description} />} */}\r\n        </Typography>\r\n        <Typography style={{ marginBottom: '1em', marginTop: '0.2em' }} variant='h5' gutterBottom component='div'>\r\n          {Math.round(day.main.temp)} °C\r\n        </Typography>\r\n        <Typography style={{ fontSize: '1em' }} variant='h5' gutterBottom component='div'>\r\n          {day.weather[0].main}\r\n        </Typography>\r\n      </div>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default WeatherCard\r\n","import s from './WeekWeather.module.css'\r\nimport { Container } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport WeatherCard from './WeatherCard/WeatherCard'\r\n\r\nconst WeekWeather = ({ activePlace, weekWeatherData }) => {\r\n  const dailyData = weekWeatherData.list.filter((reading) => reading.dt_txt.includes('12:00:00'))\r\n\r\n  const formatCards = () => {\r\n    return dailyData.map((day, index) => <WeatherCard day={day} key={index} />)\r\n  }\r\n\r\n  return (\r\n    <Container className={s.wrapper}>\r\n      <Box>{formatCards()}</Box>\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default WeekWeather\r\n","import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { fetchWeekWeatherData } from './../../redux/reducers/weatherReducer'\r\nimport Preloader from './../common/Preloader/Preloader'\r\nimport WeekWeather from './WeekWeather/WeekWeather'\r\n\r\nconst WeekWeatherContainer = ({ activePlace }) => {\r\n  const dispatch = useDispatch()\r\n  const weekWeatherData = useSelector((state) => state.weather.weekWeatherData) //get data\r\n\r\n  //fetch data\r\n  useEffect(() => {\r\n    dispatch(fetchWeekWeatherData(activePlace))\r\n  }, [dispatch, activePlace])\r\n\r\n  //display preloader, while data is empty\r\n  if (!weekWeatherData) {\r\n    return <Preloader />\r\n  }\r\n  return <WeekWeather activePlace={activePlace} weekWeatherData={weekWeatherData} />\r\n}\r\n\r\nexport default WeekWeatherContainer\r\n","import { Grid } from '@mui/material'\r\nimport { HashRouter as Router } from 'react-router-dom'\r\n// import { BrowserRouter as Router } from 'react-router-dom'\r\nimport { Route, Routes } from 'react-router-dom'\r\nimport { Navigate } from 'react-router'\r\nimport { useSelector } from 'react-redux'\r\nimport Header from './components/Header/Header'\r\nimport DayWeatherContainer from './components/DayWeatherContainer/DayWeatherContainer'\r\nimport WeekWeatherContainer from './components/WeekWeatherContainer/WeekWeatherContainer'\r\n\r\nconst App = () => {\r\n  const places = useSelector((state) => state.weather.places)\r\n  const activePlace = useSelector((state) => state.weather.activePlace)\r\n\r\n  return (\r\n    <Router>\r\n      <Grid container>\r\n        <Grid item xs={12}>\r\n          <Header places={places} activePlace={activePlace} />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Routes>\r\n            {/* redirect to first page */}\r\n            <Route path='/' element={<Navigate replace to='/current-weather' />} />\r\n            <Route path='current-weather' element={<DayWeatherContainer activePlace={activePlace} />} />\r\n            <Route path='weather-forecast' element={<WeekWeatherContainer activePlace={activePlace} />} />\r\n          </Routes>\r\n        </Grid>\r\n      </Grid>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { applyMiddleware, combineReducers, createStore } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport thunk from 'redux-thunk'\r\nimport weatherReducer from './reducers/weatherReducer'\r\n\r\nlet rootReducer = combineReducers({\r\n  weather: weatherReducer,\r\n})\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools(applyMiddleware(thunk)))\r\n\r\nexport default store\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport reportWebVitals from './reportWebVitals'\r\nimport { Provider } from 'react-redux'\r\nimport store from './redux/store'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Header_wrapper__2Nd7X\",\"toolbar\":\"Header_toolbar__wDPgW\",\"link\":\"Header_link__1lqXY\",\"link_active\":\"Header_link_active__36p3d\",\"select\":\"Header_select__1UDnr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"DayWeather_wrapper__IuESj\",\"title\":\"DayWeather_title__2MbO8\",\"image\":\"DayWeather_image__2_6BT\",\"date\":\"DayWeather_date__1ELpE\",\"parameter\":\"DayWeather_parameter__QfwrH\"};"],"sourceRoot":""}